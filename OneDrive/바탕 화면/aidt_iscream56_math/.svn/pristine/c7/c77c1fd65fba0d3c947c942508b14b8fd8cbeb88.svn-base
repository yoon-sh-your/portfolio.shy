// document.addEventListener("DOMContentLoaded", () => {
//   setTimeout(() => {
//     const svgList = document.querySelectorAll(".img01");
//     const btnReset = document.querySelector(".btnReset");

//     if (!svgList.length) {
//       console.error("img01 요소가 존재하지 않습니다.");
//       return;
//     }

//     svgList.forEach((svg) => {
//       const imgArea = svg.closest(".img_area");
//       const svg2 = imgArea.querySelector("svg.img02");
//       const dotWrap = imgArea.querySelector(".dot_wrap");
//       const guideLine = svg.querySelector("path.line");

//       if (!guideLine || !svg2) return;

//       svg.addEventListener("click", () => {
//         if (svg2.classList.contains("folded")) return;

//         const d = guideLine.getAttribute("d");
//         const coords = [...d.matchAll(/(-?\d+\.?\d*)/g)].map(m => parseFloat(m[1]));
//         const [x1, y1, x2, y2] = coords;

//         let transformStr = "";

//         if (x1 === x2) {
//           // 수직 대칭
//           const cx = x1;
//           transformStr = `translate(${2 * cx}, 0) scale(-1, 1)`;
//         } else if (y1 === y2) {
//           // 수평 대칭
//           const cy = y1;
//           transformStr = `translate(0, ${2 * cy}) scale(1, -1)`;
//         } else {
//           // 기울어진 선에 대한 대칭 처리
//           const angle = Math.atan2(y2 - y1, x2 - x1);
//           const cx = x1;
//           const cy = y1;

//           transformStr =
//             `translate(${cx}, ${cy}) ` +
//             `rotate(${angle * 180 / Math.PI}) ` +
//             `scale(1, -1) ` +
//             `rotate(${-angle * 180 / Math.PI}) ` +
//             `translate(${-cx}, ${-cy})`;
//         }

//         svg2.style.transition = "transform 0.6s ease-in-out";
//         svg2.style.transformOrigin = "left center";
//         svg2.style.transform = transformStr;
//         svg2.classList.add("folded");

//         if (dotWrap) dotWrap.style.display = "none";
//         btnReset?.classList.add("active");
//       });
//     });

//     // 리셋 버튼 동작
//     btnReset?.addEventListener("click", () => {
//       document.querySelectorAll("svg.img02").forEach(svg2 => {
//         svg2.style.transform = "";
//         svg2.classList.remove("folded");
//       });

//       document.querySelectorAll(".dot_wrap").forEach(dot => {
//         dot.style.display = "flex";
//       });

//       btnReset.classList.remove("active");
//     });
//   }, 100);
// });

document.addEventListener("DOMContentLoaded", () => {
  setTimeout(() => {
    const btnReset = document.querySelector(".btnReset");
    const svgList = document.querySelectorAll(".img01");

    if (!svgList.length) {
      console.error("img01 요소가 존재하지 않습니다.");
      return;
    }

    svgList.forEach((svg) => {
      const imgArea = svg.closest(".img_area");
      const svg2 = imgArea.querySelector("svg.img02");
      const dotWrap = imgArea.querySelector(".dot_wrap");
      const gif = imgArea.querySelector("span[class^='gif']"); // gif01, gif02
      const guideLine = svg2?.querySelector("path");

      if (!guideLine || !svg2 || !gif) return;

      svg.addEventListener("click", () => {
        if (svg2.classList.contains("folded")) return;

        const d = guideLine.getAttribute("d");
        const coords = [...d.matchAll(/(-?\d+\.?\d*)/g)].map(m => parseFloat(m[1]));

        let transformStr = "";
        if (coords.length >= 4) {
          const [x1, y1, x2, y2] = coords;
          if (x1 === x2) {
            const cx = x1;
            transformStr = `translate(${2 * cx}, 0) scale(-1, 1)`;
          } else if (y1 === y2) {
            const cy = y1;
            transformStr = `translate(0, ${2 * cy}) scale(1, -1)`;
          } else {
            const angle = Math.atan2(y2 - y1, x2 - x1);
            const cx = x1;
            const cy = y1;
            transformStr =
              `translate(${cx}, ${cy}) ` +
              `rotate(${angle * 180 / Math.PI}) ` +
              `scale(1, -1) ` +
              `rotate(${-angle * 180 / Math.PI}) ` +
              `translate(${-cx}, ${-cy})`;
          }
        }

        svg2.style.transition = "transform 0.6s ease-in-out";
        svg2.style.transformOrigin = "left center";
        svg2.style.transform = transformStr;
        svg2.classList.add("folded");

        if (dotWrap) dotWrap.style.display = "none";
        if (gif) gif.style.display = "block";

        btnReset?.classList.add("active");
      });
    });

    // ✅ 리셋 버튼 동작
    btnReset?.addEventListener("click", () => {
      const currentPageId = document.querySelector("#app_wrap")?.getAttribute("data-current-page");
      if (!currentPageId) return;
    
      const currentPage = document.querySelector(`.page.${currentPageId}`);
      if (!currentPage) return;
    
      currentPage.querySelectorAll(".img_area").forEach(imgArea => {
        const svg2 = imgArea.querySelector("svg.img02");
        const dotWrap = imgArea.querySelector(".dot_wrap");
        const gif = imgArea.querySelector("span[class^='gif'] img"); // <img> 선택
    
        if (svg2) {
          svg2.style.transform = "";
          svg2.classList.remove("folded");
        }
        if (dotWrap) {
          dotWrap.style.display = "flex";
        }
        if (gif) {
          // ✅ GIF src 리셋 (강제 새로고침)
          const src = gif.getAttribute("src");
          gif.setAttribute("src", src);
          gif.parentElement.style.display = "none"; // gif 감싸는 span 숨기기
        }
      });
    
      btnReset.classList.remove("active");
    });
    
  }, 100);
});
